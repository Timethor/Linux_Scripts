#!/bin/bash

#------------------------------------------------------------------------------
# Save the existing iptables just in case
#------------------------------------------------------------------------------
    cp /etc/sysconfig/iptables /etc/sysconfig/iptables.old

# For debugging use iptables -v.
    IPTABLES="/sbin/iptables"
    IP6TABLES="/sbin/ip6tables"
    MODPROBE="/sbin/modprobe"
    RMMOD="/sbin/rmmod"
    ARP="/sbin/arp"


#------------------------------------------------------------------------------
# Logging options.
#------------------------------------------------------------------------------
    LOG="LOG --log-level debug --log-tcp-sequence --log-tcp-options"
    LOG="$LOG --log-ip-options"


#------------------------------------------------------------------------------
# Defaults for rate limiting
#------------------------------------------------------------------------------
    RLIMIT1="-m limit --limit 1/s --limit-burst 3"
    RLIMIT2="-m limit --limit 2/s --limit-burst 6"
    RLIMIT3="-m limit --limit 4/s --limit-burst 12"
    RLIMIT4="-m limit --limit 12/s --limit-burst 36"

#------------------------------------------------------------------------------
# Unprivileged ports.
#------------------------------------------------------------------------------
    PHIGH="1024:65535"
    PSSH="1000:1023"


#------------------------------------------------------------------------------
# Load required kernel modules
#------------------------------------------------------------------------------
    $MODPROBE ip_conntrack_ftp
    $MODPROBE ip_conntrack_irc


#------------------------------------------------------------------------------
# Mitigate ARP spoofing/poisoning and similar attacks.
#------------------------------------------------------------------------------
# Hardcode static ARP cache entries here
#    $ARP -s IP-ADDRESS MAC-ADDRESS


#------------------------------------------------------------------------------
# Kernel configuration. (IPV4)
#------------------------------------------------------------------------------

# Disable IP forwarding.
# On => Off = (reset)
    echo 1 > /proc/sys/net/ipv4/ip_forward
    echo 0 > /proc/sys/net/ipv4/ip_forward

# Enable IP spoofing protection
    for i in /proc/sys/net/ipv4/conf/*/rp_filter; do echo 1 > $i; done

# Protect against SYN flood attacks
    echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# Ignore all incoming ICMP echo requests
    echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all

# Ignore ICMP echo requests to broadcast
    echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# Log packets with impossible addresses.
    for i in /proc/sys/net/ipv4/conf/*/log_martians; do echo 1 > $i; done

# Don't log invalid responses to broadcast
    echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses

# Don't accept or send ICMP redirects.
    for i in /proc/sys/net/ipv4/conf/*/accept_redirects; do echo 0 > $i; done
    for i in /proc/sys/net/ipv4/conf/*/send_redirects; do echo 0 > $i; done

# Don't accept source routed packets.
    for i in /proc/sys/net/ipv4/conf/*/accept_source_route; do echo 0 > $i; done

# Disable multicast routing
#    for i in /proc/sys/net/ipv4/conf/*/mc_forwarding; do echo 0 > $i; done

# Disable proxy_arp.
    for i in /proc/sys/net/ipv4/conf/*/proxy_arp; do echo 0 > $i; done

# Enable secure redirects, i.e. only accept ICMP redirects for gateways
# Helps against MITM attacks.
    for i in /proc/sys/net/ipv4/conf/*/secure_redirects; do echo 1 > $i; done

# Disable bootp_relay
    for i in /proc/sys/net/ipv4/conf/*/bootp_relay; do echo 0 > $i; done

#------------------------------------------------------------------------------    
# Default policies.
#------------------------------------------------------------------------------

# Drop everything by default.
    $IPTABLES -P INPUT DROP
    $IPTABLES -P FORWARD DROP
    $IPTABLES -P OUTPUT DROP

# Set the nat/mangle/raw tables' chains to ACCEPT
    $IPTABLES -t nat -P PREROUTING ACCEPT
    $IPTABLES -t nat -P OUTPUT ACCEPT
    $IPTABLES -t nat -P POSTROUTING ACCEPT

    $IPTABLES -t mangle -P PREROUTING ACCEPT
    $IPTABLES -t mangle -P INPUT ACCEPT
    $IPTABLES -t mangle -P FORWARD ACCEPT
    $IPTABLES -t mangle -P OUTPUT ACCEPT
    $IPTABLES -t mangle -P POSTROUTING ACCEPT

# Cleanup.
#------------------------------------------------------------------------------

# Delete all
    $IPTABLES -F
    $IPTABLES -t nat -F
    $IPTABLES -t mangle -F

# Delete all
    $IPTABLES -X
    $IPTABLES -t nat -X
    $IPTABLES -t mangle -X

# Zero all packets and counters.
    $IPTABLES -Z
    $IPTABLES -t nat -Z
    $IPTABLES -t mangle -Z

    
# Completely disable IPv6.
#------------------------------------------------------------------------------

# Block all IPv6 traffic
# If the ip6tables command is available, try to block all IPv6 traffic.

if test -x $IP6TABLES; then
    
# Set the default policies
# drop everything
    $IP6TABLES -P INPUT DROP 2>/dev/null
    $IP6TABLES -P FORWARD DROP 2>/dev/null
    $IP6TABLES -P OUTPUT DROP 2>/dev/null

# The mangle table can pass everything
    $IP6TABLES -t mangle -P PREROUTING ACCEPT 2>/dev/null
    $IP6TABLES -t mangle -P INPUT ACCEPT 2>/dev/null
    $IP6TABLES -t mangle -P FORWARD ACCEPT 2>/dev/null
    $IP6TABLES -t mangle -P OUTPUT ACCEPT 2>/dev/null
    $IP6TABLES -t mangle -P POSTROUTING ACCEPT 2>/dev/null

# Delete all rules.
    $IP6TABLES -F 2>/dev/null
    $IP6TABLES -t mangle -F 2>/dev/null

# Delete all chains.
    $IP6TABLES -X 2>/dev/null
    $IP6TABLES -t mangle -X 2>/dev/null

# Zero all packets and counters.
    $IP6TABLES -Z 2>/dev/null
    $IP6TABLES -t mangle -Z 2>/dev/null
fi

#------------------------------------------------------------------------------
# Custom user-defined chains.
#------------------------------------------------------------------------------

# LOG packets, then ACCEPT.
    $IPTABLES -N ACCEPTLOG
    $IPTABLES -A ACCEPTLOG -j $LOG $RLIMIT2     --log-prefix "IPtables:ACCEPT ===> "
    $IPTABLES -A ACCEPTLOG -j ACCEPT

# LOG packets, then ACCEPT.
    $IPTABLES -N SSHLOG
    $IPTABLES -A SSHLOG -j $LOG $RLIMIT2        --log-prefix "IPtables:ACCEPT =SSH=> "
    $IPTABLES -A SSHLOG -j ACCEPT $RLIMIT3

# LOG packets, then ACCEPT.
    $IPTABLES -N MAILLOG
    $IPTABLES -A MAILLOG -j $LOG $RLIMIT2       --log-prefix "IPtables:ACCEPT =MAIL=> "
    $IPTABLES -A MAILLOG -j ACCEPT

# LOG packets, then ACCEPT.
    $IPTABLES -N DNSLOG
    $IPTABLES -A DNSLOG -j $LOG $RLIMIT2        --log-prefix "IPtables:ACCEPT =DNS=> "
    $IPTABLES -A DNSLOG -j ACCEPT

# LOG packets, then DROP.
    $IPTABLES -N DROPLOG
    $IPTABLES -A DROPLOG -j $LOG $RLIMIT2       --log-prefix "IPtables:-DROP- =====> "
    $IPTABLES -A DROPLOG -j DROP

# LOG bad packets, then DROP.
    $IPTABLES -N SINODROPLOG
    $IPTABLES -A SINODROPLOG -j $LOG            --log-prefix "IPtables:-DROP- =!S!=> "
    $IPTABLES -A SINODROPLOG -j DROP

# LOG packets, then REJECT.
# TCP packets are rejected with a TCP reset.
    $IPTABLES -N REJECTLOG
    $IPTABLES -A REJECTLOG -j $LOG $RLIMIT2     --log-prefix "IPtables:REJECT ===> "
    $IPTABLES -A REJECTLOG -p tcp -j REJECT --reject-with tcp-reset
    $IPTABLES -A REJECTLOG -j REJECT

# Only allows RELATED ICMP types
# (destination-unreachable, time-exceeded, and parameter-problem).
    $IPTABLES -N RELATED_ICMP
    $IPTABLES -A RELATED_ICMP -p icmp --icmp-type destination-unreachable -j ACCEPT 
    $IPTABLES -A RELATED_ICMP -p icmp --icmp-type time-exceeded -j ACCEPT
    $IPTABLES -A RELATED_ICMP -p icmp --icmp-type parameter-problem -j ACCEPT
    $IPTABLES -A RELATED_ICMP -j DROPLOG

# Make It Even Harder To Multi-PING
    $IPTABLES -A INPUT -p icmp $RLIMIT1 -j ACCEPT
    $IPTABLES -A INPUT -p icmp $RLIMIT1 -j LOG --log-prefix PING-DROP:
    $IPTABLES -A INPUT -p icmp -j DROP
    $IPTABLES -A OUTPUT -p icmp -j ACCEPT

# Only allow the minimally required/recommended parts of ICMP. Block the rest.
#------------------------------------------------------------------------------

# TODO: This section needs a lot of testing!

# First, drop all fragmented ICMP packets (almost always malicious).
    $IPTABLES -A INPUT -p icmp --fragment -j DROPLOG
    $IPTABLES -A OUTPUT -p icmp --fragment -j DROPLOG
    $IPTABLES -A FORWARD -p icmp --fragment -j DROPLOG

# -- Allow all ESTABLISHED ICMP traffic.
    $IPTABLES -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT $RLIMIT2
    $IPTABLES -A OUTPUT -p icmp -m state --state ESTABLISHED -j ACCEPT $RLIMIT2

# -- Allow some parts of the RELATED ICMP traffic, block the rest.
    $IPTABLES -A INPUT -p icmp -m state --state RELATED -j RELATED_ICMP $RLIMIT2
    $IPTABLES -A OUTPUT -p icmp -m state --state RELATED -j RELATED_ICMP $RLIMIT2

# -- Allow incoming ICMP echo requests (ping), but only rate-limited.
    $IPTABLES -A INPUT -p icmp --icmp-type echo-request -j ACCEPT $RLIMIT2

# -- Allow outgoing ICMP echo requests (ping), but only rate-limited.
    $IPTABLES -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT $RLIMIT2

# Drop any other ICMP traffic.
    $IPTABLES -A INPUT -p icmp -j DROPLOG
    $IPTABLES -A OUTPUT -p icmp -j DROPLOG
    $IPTABLES -A FORWARD -p icmp -j DROPLOG

# Selectively allow certain special types of traffic.
#------------------------------------------------------------------------------

# -- Allow loopback interface to do anything.
    $IPTABLES -A INPUT -i lo -j ACCEPT
    $IPTABLES -A OUTPUT -o lo -j ACCEPT

# -- Allow incoming connections related to existing allowed connections.
    $IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# -- Allow outgoing connections EXCEPT invalid
    $IPTABLES -A OUTPUT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

# Miscellaneous.
#------------------------------------------------------------------------------

# We don't care about Milkosoft, Drop SMB/CIFS/etc..
    $IPTABLES -A INPUT -p tcp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP
    $IPTABLES -A INPUT -p udp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP

# Explicitly drop invalid incoming traffic
    $IPTABLES -A INPUT -m state --state INVALID -j DROP

# Drop invalid outgoing traffic, too.
    $IPTABLES -A OUTPUT -m state --state INVALID -j DROP

# If we would use NAT, INVALID packets would pass - BLOCK them anyways
    $IPTABLES -A FORWARD -m state --state INVALID -j DROP

# PORT Scanners (stealth also)
    $IPTABLES -A INPUT -m state --state NEW -p tcp --tcp-flags ALL ALL -j DROP
    $IPTABLES -A INPUT -m state --state NEW -p tcp --tcp-flags ALL NONE -j DROP

# TODO: Some more anti-spoofing rules? For example:

#   -------------- Special testing syn drops --------------
    $IPTABLES -N SYN-DROPLOG
    $IPTABLES -A SYN-DROPLOG -j $LOG $RLIMIT2       --log-prefix "IPtables:-DROP- =SYN=> "
    $IPTABLES -A SYN-DROPLOG -j DROP
#   -------------- Special testing syn drops --------------
    
    $IPTABLES -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j SYN-DROPLOG
    $IPTABLES -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j SYN-DROPLOG
    $IPTABLES -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j SYN-DROPLOG
    
    $IPTABLES -N SYN_FLOOD
    $IPTABLES -A INPUT -p tcp --syn -j SYN_FLOOD
    $IPTABLES -A SYN_FLOOD $RLIMIT2 -j RETURN
    $IPTABLES -A SYN_FLOOD -j DROPLOG $RLIMIT1
    $IPTABLES -A SYN_FLOOD -j DROP

# Drop/Block known-bad IPs (see http://www.dshield.org/top10.php).

#------------------------------------------------------------------------------
# BAD IPs LOGGED & DROPPED
#------------------------------------------------------------------------------    
    $IPTABLES -N RBL-Firewall
    $IPTABLES -A RBL-Firewall -m state --state ESTABLISHED,RELATED -j ACCEPT    
    while read LINE
        $IPTABLES -A RBL-Firewall -s $LINE -j SINODROPLOG
    done < "iptables_BLACKLIST"

    
#------------------------------------------------------------------------------
# Drop any traffic from IANA-reserved IPs.
#------------------------------------------------------------------------------
    $IPTABLES -A INPUT -s 0.0.0.0/8 -j DROPLOG
    $IPTABLES -A INPUT -s 10.0.0.0/8 -j ACCEPTLOG $RLIMIT4
    $IPTABLES -A INPUT -s 169.254.0.0/16 -j DROPLOG
    $IPTABLES -A INPUT -s 192.0.2.0/24 -j DROPLOG
    $IPTABLES -A INPUT -s 172.16.0.0/12 -j DROPLOG
    $IPTABLES -A INPUT -s 192.0.2.0/24 -j DROPLOG
    $IPTABLES -A INPUT -s 198.51.100.0/24 -j DROPLOG
    $IPTABLES -A INPUT -s 203.0.113.0/24 -j DROPLOG
    $IPTABLES -A INPUT -s 224.0.0.0/3 -j DROPLOG
    

#------------------------------------------------------------------------------
# Selectively allow certain OUTBOUND connections, block the rest.
#------------------------------------------------------------------------------

# The Proxy Ports
# -----------------------------------------------------------------------------    
# -- Allow outgoing requests to various proxies. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 8080 -j ACCEPT
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 8090 -j ACCEPT
# -- Allow outgoing Squid requests. Unencrypted, use with care.
    $IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 3128 -j ACCEPT

# The Web Ports
# -----------------------------------------------------------------------------
# -- Allow outgoing HTTP requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT
# -- Allow outgoing HTTPS requests.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT

# The Mail Ports
# -----------------------------------------------------------------------------
# -- Allow outgoing SMTPS requests. Do NOT allow unencrypted SMTP!
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 465 -j MAILLOG
# -- Allow outgoing "submission" (RFC 2476) requests.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 587 -j MAILLOG
# -- Allow outgoing POP3S requests.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 995 -j MAILLOG

# The Remote Connection Ports
# -----------------------------------------------------------------------------
# -- Allow outgoing SSH requests.
    $IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 22 -j SSHLOG
# -- Allow outgoing FTP requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 21 -j FTPLOG
    
# -- Allow outgoing RDesktop requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 3391 -j ACCEPT
# -- Allow outgoing iRDMI requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 8000  -j ACCEPT

# The Gaming & Voice Comms Ports
# -----------------------------------------------------------------------------   
# -- Allow outgoing MINECRAFT requests.
    $IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 25550:25599 -j ACCEPT
# -- Allow outgoing Teamspeak 3 requests.
    #$IPTABLES -A OUTPUT -m state --state NEW -p udp --dport 9987 -j ACCEPT
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 10011 -j ACCEPT
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 30033 -j ACCEPT
# -- Allow outgoing ventrilo requests.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 3874 -j ACCEPT
    #$IPTABLES -A OUTPUT -m state --state NEW -p udp --dport 3874 -j ACCEPT

# -- Allow outgoing IRC requests. Unencrypted, use with care.
    # Note: This usually needs the ip_conntrack_irc kernel module.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 6667 -j ACCEPT

# Time
# -----------------------------------------------------------------------------
# -- Allow outgoing NNTP requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 119 -j ACCEPT
# -- Allow outgoing NTP requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p udp --dport 123 -j ACCEPT

# The Database Ports
# -----------------------------------------------------------------------------
# -- Allow outgoing MySQL requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT

# Other Ports
# -----------------------------------------------------------------------------
# -- Allow outgoing DNS requests. Few things will work without this.
    $IPTABLES -A OUTPUT -m state --state NEW -p udp --dport 53 -j DNSLOG
    $IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 53 -j DNSLOG
# -- Allow outgoing DHCP requests. Unencrypted, use with care.
    # TODO: This is completely untested, I have no idea whether it works!
    # TODO: I think this can be tightened a bit more.
    #$IPTABLES -A OUTPUT -m state --state NEW -p udp --sport 67:68 --dport 67:68 -j ACCEPTLOG
# -- Allow outgoing CVS requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 2401 -j ACCEPT
# -- Allow outgoing SVN requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 3690 -j ACCEPT
# -- Allow outgoing PLESK requests. Unencrypted, use with care.
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dport 8443 -j ACCEPT
# -- Allow outgoing Tor (http://tor.eff.org) requests.
    # Note: Do _not_ use unencrypted protocols over Tor (sniffing is possible)!
    #$IPTABLES -A OUTPUT -m state --state NEW -p tcp --dports 9001,9002,9030,9031,9090,9091 -j ACCEPT
# -- Allow outgoing OpenVPN requests.
    #$IPTABLES -A OUTPUT -m state --state NEW -p udp --dport 1194 -j ACCEPTLOG
    # TODO: ICQ, MSN, GTalk, Skype, Yahoo, etc...


#------------------------------------------------------------------------------
# Selectively allow certain INBOUND connections, block the rest.
#------------------------------------------------------------------------------

# The Proxy Ports
# -----------------------------------------------------------------------------    
# -- Allow incoming Squid requests. Unencrypted, use with care.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 3128 -j ACCEPT
    
# The Web Ports
# -----------------------------------------------------------------------------
# -- Allow incoming HTTP requests.
    $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 80 -j ACCEPT 
# -- Allow incoming HTTPS requests.
    $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 443 -j ACCEPT     
    
# -- Allow incoming Webmin requests. Unencrypted, use with care.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 10000 -j ACCEPT
    
# -- Allow incoming Atlassian requests.
    # -- Allow incoming Stach requests.
        $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 7990 -j ACCEPT
    # -- Allow incoming JIRA requests.
        $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 8100 -j ACCEPT
    # -- Allow incoming FishEye/Crusible requests.
        $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 8060 -j ACCEPT
    # -- Allow incoming Bamboo requests.
        $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 8085 -j ACCEPT
        

# The Mail Ports
# -----------------------------------------------------------------------------
# -- Allow incoming POP3 requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 110 -j MAILLOG
# -- Allow incoming IMAP4 requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 143 -j MAILLOG
# -- Allow incoming POP3S requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 995 -j MAILLOG    
# -- Allow incoming SMTP requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 25 -j MAILLOG
# -- Allow outgoing "submission" (RFC 2476) requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 587 -j MAILLOG

# The Remote Connection Ports
# -----------------------------------------------------------------------------
# -- Allow incoming SSH requests.
    $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 22 -j SSHLOG
# -- Allow incoming FTP requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp --dport 21 -j FTPLOG
    
# -- Allow incoming RDesktop requests. Unencrypted, use with care.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 3391 -j ACCEPT
# -- Allow incoming iRDMI requests. Unencrypted, use with care.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 8000  -j ACCEPT
    
# The Gaming & Voice Comms Ports
# -----------------------------------------------------------------------------    
# -- Allow incoming MINECRAFT requests.
    $IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 25550:25599 -j ACCEPT
# -- Allow incoming Teamspeak 3 requests.
    $IPTABLES -A INPUT -m state --state NEW -p udp --dport 9987 -j ACCEPT
    $IPTABLES -A INPUT -m state --state NEW -p tcp --dport 10011 -j ACCEPT
    $IPTABLES -A INPUT -m state --state NEW -p tcp --dport 30033 -j ACCEPT
# -- Allow incoming ventrilo requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp --dport 3874 -j ACCEPT
    
# -- Allow incoming IRC requests. Unencrypted, use with care.
    # Note: This usually needs the ip_conntrack_irc kernel module.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 6667 -j ACCEPT
    
# Time
# -----------------------------------------------------------------------------
# -- Allow incoming NNTP requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp --dport 119 -j ACCEPT $RLIMIT3
    
# The Database Ports
# -----------------------------------------------------------------------------
# -- Allow incoming MySQL requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT
# -- Allow incoming Oracle MTS requests.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp --dport 2030 -j ACCEPT
    #$IPTABLES -A INPUT -m state --state NEW -p udp --dport 2030 -j ACCEPT
    
# Other Ports
# -----------------------------------------------------------------------------
# -- Allow incoming SVN requests. Unencrypted, use with care.
    #$IPTABLES -A INPUT -m state --state NEW -p tcp --dport 3690 -j ACCEPT
# -- Allow incoming DNS requests.
    #$IPTABLES -A INPUT -m state --state NEW -p udp -m udp --dport 53 -j DNSLOG
    #$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --dport 53 -j DNSLOG
    
    
# Explicitly log and reject everything else.
#------------------------------------------------------------------------------
# -- Use REJECTLOG instead of REJECT if you need/want logging.
    $IPTABLES -A INPUT -j REJECT
    $IPTABLES -A OUTPUT -j REJECT
    $IPTABLES -A FORWARD -j REJECT
    
#------------------------------------------------------------------------------
# Save so we dont have to run the damn thing everytime at startup
#------------------------------------------------------------------------------
    service iptables save 
    service iptables restart
    
#------------------------------------------------------------------------------
# Testing the firewall.
#------------------------------------------------------------------------------
    #You should check/test that the firewall really works, using
    #iptables -vnL, nmap, ping, telnet, ...

#------------------------------------------------------------------------------
# Exit gracefully.
#------------------------------------------------------------------------------
    exit 0